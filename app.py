# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ERKrZrEZwNGUfl04C0BRvmhcyHzsHo9s

https://www.google.com/search?q=d%C3%A9ployer+un+mod%C3%A8le+Machine+Learning+dans+une+application+web+python&rlz=1C1GCEA_enFR1040FR1040&sxsrf=AJOqlzUoKc2uoDsDPeJ6oE8fX-ylcHoxAA:1676554155784&source=lnms&tbm=vid&sa=X&ved=2ahUKEwjmwZv3kpr9AhWXY6QEHYnACsMQ_AUoAXoECAIQAw&biw=1280&bih=569&dpr=1.5#fpstate=ive&vld=cid:b07ffca4,vid:u0Syto1oAGA
"""

# Librairies nécessaires
# Les librairies dont l'installatione est requise sont mentionnées dans le fichier "requirement.txt" dans le github

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor

# Design de l'application

import streamlit as st

# Création des onglets
tabs = ["Onglet 1", "Onglet 2"]

# Récupération de l'onglet sélectionné
if "tab" not in st.session_state:
    st.session_state["tab"] = tabs[0]

# Affichage des onglets
for tab in tabs:
    if st.session_state["tab"] == tab:
        st.write(f"## {tab}")
        if tab == "Onglet 1":
            st.write("Contenu de l'onglet 1")
        elif tab == "Onglet 2":
            st.write("Contenu de l'onglet 2")
    else:
        st.write(f"[{tab}](?tab={tab})")

# Mise à jour de l'onglet sélectionné
if "tab" in st.experimental_get_query_params():
    st.session_state["tab"] = st.experimental_get_query_params()["tab"][0]






# Chargement des ensembles de test et d'apprentissage

url_Xtrain = 'https://raw.githubusercontent.com/laurianerobin/DS11/main/X_train.csv'
X_train = pd.read_csv(url_Xtrain,parse_dates=[0])

url_ytrain = 'https://raw.githubusercontent.com/laurianerobin/DS11/main/y_train.csv'
y_train = pd.read_csv(url_ytrain,parse_dates=[0])

# Application du meilleur modèle retenu

model_best = GradientBoostingRegressor(learning_rate = 0.1, max_depth = 3, n_estimators = 100)
model_best.fit(X_train, y_train)

# Prédiction sur les données sélectionnées

prediction=model_best.predict(df)
pred = np.exp(prediction)

st.subheader("Le prix de la maison est :")
st.write(pred)
